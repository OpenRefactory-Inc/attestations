{
    "_type": "https://in-toto.io/Statement/v0.1",
    "predicateType": "https://cosign.sigstore.dev/attestation/vuln/v1",
    "subject": [
        {
            "name": "1.16.2.zip",
            "digest": {
                "sha256": "fbba3cf04e9ecb9b287da95db7e9ebbfa8ba2e3b451a6f0d68023e022f833fd6"
            }
        }
    ],
    "predicate": {
        "invocation": {
            "parameters": [],
            "uri": "",
            "event_id": "",
            "builder.id": ""
        },
        "scanner": {
            "uri": "https://www.openrefactory.com/technology/",
            "version": "2.0.0",
            "db": {
                "uri": "",
                "version": ""
            },
            "result": {
                "metadata": {
                    "attestation_text": "This document attests that the project mentioned above has been scanned and triaged by OpenRefactory while looking for specific CWEs mentioned above. A total of 1 bugs/vulnerabilities was found.",
                    "language": "JAVA",
                    "sponsorship_text": "This work is done by the security researchers from OpenRefactory and is supported by the 'Open Source Security Foundation's Project 'Alpha-Omega'. 'Alpha-Omega' is a project partnering with open source software project maintainers to systematically find new, as-yet-undiscovered vulnerabilities in open source code- and get them fixed to improve global software supply chain security.",
                    "target_cwes": [
                        "CWE-22",
                        "CWE-78",
                        "CWE-79",
                        "CWE-89",
                        "CWE-90",
                        "CWE-95",
                        "CWE-113",
                        "CWE-117",
                        "CWE-200",
                        "CWE-259",
                        "CWE-283",
                        "CWE-295",
                        "CWE-297",
                        "CWE-319",
                        "CWE-327",
                        "CWE-329",
                        "CWE-346",
                        "CWE-347",
                        "CWE-409",
                        "CWE-502",
                        "CWE-521",
                        "CWE 547",
                        "CWE-601",
                        "CWE-611",
                        "CWE-614",
                        "CWE-643",
                        "CWE-732",
                        "CWE-759",
                        "CWE-760",
                        "CWE-827",
                        "CWE-918",
                        "CWE-1004",
                        "CWE-1333",
                        "CWE-1240"
                    ]
                },
                "results": [
                    {
                        "locations": [
                            {
                                "physicalLocation": {
                                    "artifactLocation": {
                                        "uri": "core/src/main/java/org/testcontainers/containers/ParsedDockerComposeFile.java",
                                        "uriBaseId": "%SRCROOT%"
                                    },
                                    "region": {
                                        "endColumn": 9,
                                        "endLine": 10,
                                        "snippet": {
                                            "text": "new Yaml()"
                                        },
                                        "startColumn": 8,
                                        "startLine": 10
                                    }
                                }
                            }
                        ],
                        "message": {
                            "markdown": "In file: <span class='original_filename'>ParsedDockerComposeFile.java</span>, there is a method <span class='function_name'>ParsedDockerComposeFile</span> that uses an unsafe constructor to create a YAML object. This constructor does not restrict types which can be instantiated during deserialization. As such, an attacker can provide YAML content that can lead to remote code execution. iCR suggested that <span class='key-word'>SafeConstructor</span> should be used in the YAML constructor. See more information in <a href='https://www.cve.org/CVERecord?id=CVE-2022-1471' target='_blank'>CVE-2022-1471</a>",
                            "text": "In file: ParsedDockerComposeFile.java, there is a method ParsedDockerComposeFile that uses an unsafe constructor to create a YAML object. This constructor does not restrict types which can be instantiated during deserialization. As such, an attacker can provide YAML content that can lead to remote code execution. iCR suggested that {SafeConstructor} should be used in the YAML constructor. See more information in CVE-2022-1471"
                        },
                        "ruleId": "USYC-1"
                    }
                ],
                "source": {
                    "name": "org.testcontainers:testcontainers",
                    "package_uri": "",
                    "package_version_uri": "",
                    "repo_uri": "https://github.com/testcontainers/testcontainers-java",
                    "repo_version_uri": "https://github.com/testcontainers/testcontainers-java//tree/1.16.2",
                    "type": "MAVEN",
                    "version": "1.16.2"
                }
            }
        },
        "metadata": {
            "scanStartedOn": "2024-09-25T19:28:30.112Z",
            "scanFinishedOn": "2024-09-30T06:01:01.544Z"
        }
    }
}
